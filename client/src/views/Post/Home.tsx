import React, {useState, useEffect} from 'react'
import {Loader, Card, FormField} from '../../components'
import { CardType } from '../../components/Card'

interface RenderCardProps
{
    data:CardType[],
    title:string
}
const RenderCards:React.FC<RenderCardProps> = ({data, title}:RenderCardProps)=>
{
    if (data.length > 0) {
        return (
            <>{data.map(post=><Card key={post._id} {...post} />)}</>
        )
    }

    return (
        <h2 className="mt-5 font-bold text-[#6449ff] text-xl uppercase">{title}</h2>
    )
}

const Home:React.FC = () => {
  const [loading, setLoading] = useState<boolean>(false);
  const [allPosts, setAllPosts] = useState<CardType[]>([]);
  const [searchResult, setSearchResult] = useState<CardType[]>([]);
  const [searchText, setSearchText] = useState("");
  const [searchTimeout, setSearchTimeout] = useState<number | undefined | null>(null);

  useEffect(() => {
    const fetchPosts = async ()=>{
        setLoading(true);
        try {
            const response = await fetch("http://localhost:8000/api/v1/post",{
                method:'GET',
                headers:{
                    'Content-Type':'application/json'
                }
            });
            if(response.ok)
            {
                const result = await response.json();
                setAllPosts(result.data.reverse());
            }
        } catch (error) {
            alert(error);
        }finally{
            setLoading(false);
        }
    }
  
    fetchPosts();
  }, []);

  const handleSearchChange = (e:React.FormEvent<HTMLInputElement>) => {
    clearTimeout(searchTimeout as number  | undefined);
    setSearchText(e.currentTarget.value);

    setSearchTimeout(
        setTimeout(() => {
            const lowerCaseSearchText = searchText.toLowerCase();
            debugger;
            const searchResult = allPosts.filter(post=> post.name.toLowerCase().includes(lowerCaseSearchText) 
            || post.prompt.includes(lowerCaseSearchText));       
            setSearchResult(searchResult); 
        }, 500)
    );
  }
  
  
    return (
    <section className='max-w-7xl mx-auto'>
        <div>
            <h1 className="font-extrabold text-[#222328] text-[32px]">
                The Community Showcase
            </h1>
            <p className="mt-2 text-[#666e75] text-[18px] max-w[500px]">Browse through a collection of imaginative and visually 
            stunning images generated by DALL-E AI</p>
        </div>
        <div className='mt-16'>
            <FormField
            labelName='Search posts'
            name='text'
            type='text'
            placeholder='Search Posts'
            value={searchText}
            handleChange={handleSearchChange}
            />
        </div>
        <div className='mt-10'>
            {loading?
            <div className="flex justify-center items-center">
                <Loader />
            </div>:
            <>
            {searchText && <h2 className="font-medium text-[#666e75] text-xl mb-3 ">
                Showing a result for <span className="text-[#222328]">{searchText}</span>
                </h2>}
                <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
                    {searchText?
                    <RenderCards data={searchResult} title="No Posts" />
                    :<RenderCards data={allPosts} title="No Posts" />}
                </div>
            </>}
        </div>
    </section>
  )
}

export default Home