import React, { useState } from 'react'
import { preview } from '../../assets'
import { FormField, Loader } from '../../components'
import { getRandomPrompt } from '../../utils'
import {useNavigate} from 'react-router-dom';

interface Form
{
name:string
prompt:string
image:string
}
const Create:React.FC = () => {
    const [form, setForm] = useState<Form>({name:'', prompt:'', image:''})
    const [generatingImg, setGeneratingImg] = useState(false);
    const [loading, setLoading] = useState(false);
    const navigate = useNavigate();
    const handleChange = (e:React.FormEvent<HTMLInputElement>)=> {
        setForm({...form,[e.currentTarget.name]:e.currentTarget.value})
    }
    const handleSurpriseMe = ()=> {
        return setForm({...form,prompt:getRandomPrompt(form.prompt)});
    }
    const createPost = async (e:React.FormEvent)=>{
        e.preventDefault();
        if(form.prompt && form.image)
        {
            setLoading(true);
            try {
                const response = await fetch("http://localhost:8000/api/v1/post",{
                    method:'POST',
                    headers:{
                        'Content-Type':'application/json'
                    },
                    body:JSON.stringify({ ...form })
                });
                const data = await response.json();
                navigate('/')
            } catch (error) {
                alert(error);
            }finally
            {
                setLoading(false);
            }
        }else{
            alert('Please enter a prompt and generate image');
        }
    }
    const generateImage = async ()=> {
        if(form.prompt)
        {
            try {
                setGeneratingImg(true);
                const response = await fetch("http://localhost:8000/api/v1/dalle",{
                    method:'POST',
                    headers:{
                        'Content-Type':'application/json'
                    },
                    body:JSON.stringify({prompt:form.prompt})
                });

                const data = await response.json();
                setForm({...form, image:`data:image/jpeg;base64,${data.image}`});

            } catch (error) {
                alert(error)
            } finally
            {
                setGeneratingImg(false);
            }
        }else{
            alert('Please enter prompt');
        }
    }
  return (
    <section className="max-w-7xl mx-auto">
        <div>
        <h1 className="font-extrabold text-[#222328] text-[32px]">Create</h1>
        <p className="mt-2 text-[#666e75] text-[18px] max-w[500px]">Create a imaginative and visually 
            stunning images generated by DALL-E AI</p>
        </div>

        <form className="mt-16 max-w-3xl" onSubmit={createPost}>
            <div className="flex flex-col gap-5">
            <FormField name='name' labelName='Your name' type='text' placeholder='Hassan Ahmed' value={form.name} handleChange={handleChange} />
            <FormField name='prompt' labelName='Prompt' type='text' placeholder="An Impressionist oil painting of sunflowers in a purple vaseâ€¦" value={form.prompt} handleChange={handleChange} isSurpriseMe={true} handleSurpriseMe={handleSurpriseMe}/>
            <div className="relative w-64 h-64 bg-gray-50 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 text-sm text-gray-900 p-3 flex justify-center items-center">
                {form.image?
                <img src={form.image} alt={form.prompt} className="w-full h-full object-contain" />
                :
                <img src={preview} alt={form.prompt} className="w-9/12 h-9/12 object-contain opacity-40" />}
                {generatingImg && 
                    <div className='flex justify-center items-center rounded-lg absolute inset-0 z-0 bg-[rgba(0,0,0,0.5)]'>
                        <Loader />
                    </div>
                }
            </div>
            
            </div>
            
            <div className="mt-5 flex gap-5">
                <button type='button' onClick={generateImage} className="text-white text-sm font-medium bg-green-700 rounded-md w-full sm:w-auto px-5 py-2.5 text-center">
                    {generatingImg?"Generating...":"Generate"}
                </button>
            </div>

            <div className='mt-10'>
                <p className='text-[#666e75] text-[14px] mt-2'>
                    Once you have created the image you want, you can share it with others in the community
                </p>
                <button type='submit' className="mt-3 text-white text-sm font-medium bg-blue-700 rounded-md w-full sm:w-auto px-5 py-2.5 text-center">
                    {loading?'Sharing...' : 'Share with the Community'}
                </button>
            </div>
        </form>
        
    </section>
  )
}

export default Create